#!/usr/bin/env python
# coding: utf-8
import sys, subprocess, optparse

class Rice(object):
  """Basic terminal coloring class."""
  r  = '\033[0m'    # Reset
  w  = '\033[0;37m' # White
  t  = '\033[1;36m' # Corresponds to the _track_ color
  a  = '\033[1;32m' # Corresponds to the _artist_ color

  def __init__(self, no_color):
    if no_color:
      self.r = self.w = self.t = self.a = ''

class Playing(object):
  apps = ['iTunes', 'Spotify']

  def __init__(self, options):
    # Determine which application to use
    for application in self.apps:
      if self.is_app_open(application):
        self.app = application

    self.options = options

  def run(self):
    """Start the script."""
    last_played = None
    # Start the loop
    try:
      while True:
        # Currently playing track
        playing = self.get_formatted_track()

        if last_played == None:
          # Output the current track
          print playing
        elif last_played != playing:
          # New track
          print playing

        last_played = playing

        if self.options.m == False:
          break
    except (KeyboardInterrupt, EOFError):
      sys.exit(1)

  def get_formatted_track(self):
    """Return a formated string containing track information."""
    # Get song title and artist depending on what's playing
    (track, artist) = self.get_song_playing()
    # Choose the right icon
    icon = u'♬' if not self.options.t else 'Now Playing:'
    # Return the formatted string
    return u'{r.w}{i} {r.a}{a}{r.w} – {r.t}{t}{r.r}'.format(
        i=icon, a=artist, t=track, r=Rice(self.options.p))

  def is_app_open(self, app):
    """Look through open processes in search of `app`."""
    if app + '.app' in subprocess.check_output(['ps', '-ax']):
      return True
    else:
      return False

  def app_play_state(self):
    """Return the play state of `app`."""
    try:
      return subprocess.check_output(
        ['osascript', '-e',
        'tell application "{}" to player state as string'.format(self.app)]
      ).strip()
    except subprocess.CalledProcessError:
      return False

  def get_song_playing(self):
    """Return a list containing current song's title and artist information"""
    try:
      return subprocess.check_output(
        ['osascript', '-e',
        'tell application "{}" to name of current track'\
        '& "#" & artist of current track'.format(self.app)]
      ).strip().split('#')
    except subprocess.CalledProcessError:
      return False

if __name__ == '__main__':
  # I hate this thing.
  opts = optparse.OptionParser(usage = 'usage: %prog [options]')

  opts.add_option(
      '-p', '--plain',
      help      = 'No color. Plain old boring text.',
      
      dest      = 'p',
      default   = False,
      action    = 'store_true',)

  opts.add_option(
      '-t', '--texticon',
      help      = 'Swap the `♬ ` icon for `Now Playing` text.',

      dest      = 't',
      default   = False,
      action    = 'store_true',)

  opts.add_option(
      '-m', '--monitor',
      help      = 'Loops the program, exit with EOF(^D).',

      dest      = 'm',
      default   = False,
      action    = 'store_true',)

  options, args = opts.parse_args()
  
  Playing(options).run()
